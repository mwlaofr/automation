EXERCÍCIOS AUTOMAÇÃO
 
1. const int segmentPins[] = {3, 4, 5, 6, 7, 8, 9};
const int buttonPin = 2;

void setup() {
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
  pinMode(buttonPin, INPUT_PULLUP);
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    delay(50);
    while (digitalRead(buttonPin) == LOW);
    for (int num = 0; num < 10; num++) {
      displayNumber(num);
      delay(500);
    }
  }
}

void displayNumber(int num) {
  const byte numbers[10][7] = {
    {1,1,1,1,1,1,0}, // 0
    {0,1,1,0,0,0,0}, // 1
    {1,1,0,1,1,0,1}, // 2
    {1,1,1,1,0,0,1}, // 3
    {0,1,1,0,0,1,1}, // 4
    {1,0,1,1,0,1,1}, // 5
    {1,0,1,1,1,1,1}, // 6
    {1,1,1,0,0,0,0}, // 7
    {1,1,1,1,1,1,1}, // 8
    {1,1,1,1,0,1,1}  // 9
  };

  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentPins[i], numbers[num][i]);
  }
}


2. const int segmentPins[] = {3, 4, 5, 6, 7, 8, 9};
const int buttonPin = 2;

void setup() {
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
  pinMode(buttonPin, INPUT_PULLUP);
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    delay(50);
    while (digitalRead(buttonPin) == LOW);
    for (int num = 9; num >= 0; num--) { //Inverter
      displayNumber(num);
      delay(500);
    }
  }
}

void displayNumber(int num) {
  const byte numbers[10][7] = {
    {1,1,1,1,1,1,0}, // 0
    {0,1,1,0,0,0,0}, // 1
    {1,1,0,1,1,0,1}, // 2
    {1,1,1,1,0,0,1}, // 3
    {0,1,1,0,0,1,1}, // 4
    {1,0,1,1,0,1,1}, // 5
    {1,0,1,1,1,1,1}, // 6
    {1,1,1,0,0,0,0}, // 7
    {1,1,1,1,1,1,1}, // 8
    {1,1,1,1,0,1,1}  // 9
  };

  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentPins[i], numbers[num][i]);
  }
}

3.  const int segmentPins[] = {3, 4, 5, 6, 7, 8, 9};
const int buttonPin = 2;

void setup() {
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
  pinMode(buttonPin, INPUT_PULLUP);
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    delay(50);
    while (digitalRead(buttonPin) == LOW);
    for (int num = 0; num < 10; num++) {
      displayNumber(num);
      delay(500);
    }
      for (int num = 9; num >= 0; num--) {
      displayNumber(num);
      delay(500);
    }
  }
}

void displayNumber(int num) {
  const byte numbers[10][7] = {
    {1,1,1,1,1,1,0}, // 0
    {0,1,1,0,0,0,0}, // 1
    {1,1,0,1,1,0,1}, // 2
    {1,1,1,1,0,0,1}, // 3
    {0,1,1,0,0,1,1}, // 4
    {1,0,1,1,0,1,1}, // 5
    {1,0,1,1,1,1,1}, // 6
    {1,1,1,0,0,0,0}, // 7
    {1,1,1,1,1,1,1}, // 8
    {1,1,1,1,0,1,1}  // 9
  };

  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentPins[i], numbers[num][i]);
  }
}

4. int vermelho1 = 3;
int amarelo1 = 4;
int verde1 = 5;

void setup() {
    for(int i=3; i<=5; i++){
        pinMode(i, OUTPUT);
    }
}

void loop() {
  int tempos[] = {500, 500, 500};
  int numTempos = sizeof(tempos) / sizeof(tempos[0]);

  int pins[] = {vermelho1, amarelo1, verde1};

  int tempoTotal = 3500;

  for (int tempoPassado = 0; tempoPassado < tempoTotal; tempoPassado += tempos[0]*2) {
    for (int i = 0; i < numTempos; i++) {
      digitalWrite(pins[i], HIGH);
      delay(tempos[i]);
      digitalWrite(pins[i], LOW);
      delay(tempos[i]);
    }
  }

  delay(3500);
}

5. int vermelho1 = 3;
int amarelo1 = 4;
int verde1 = 5;
int initialTime = 5;
int endTime = 5000;

void setup() {
    for(int i=3; i<=5; i++){
        pinMode(i, OUTPUT);
    }
}

void loop() {
  int count = 0;
  for (int time = initialTime; time <= endTime; time *= 1.20) {
    for (int i = 0; i < 3; i++) {
      digitalWrite(vermelho1, HIGH);
      digitalWrite(amarelo1, HIGH);
      digitalWrite(verde1, HIGH);
      delay(time / 5);
      digitalWrite(vermelho1, LOW);
      digitalWrite(amarelo1, LOW);
      digitalWrite(verde1, LOW);
      delay(time / 5);
    }
    count++;
  }
}


6. const int buttonPin = 2;  // Pino onde o botão está conectado
const int ledPins[] = {3, 4, 5};  // Pinos dos LEDs
int currentLed = 0;
bool ledState[] = {false, false, false};
bool buttonState;
bool lastButtonState = LOW;
long lastDebounceTime = 0;
long debounceDelay = 50;

void setup() {
  pinMode(buttonPin, INPUT);
  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
  }
}

void loop() {
  int reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;
      if (buttonState == HIGH) {
        ledState[currentLed] = !ledState[currentLed];
        digitalWrite(ledPins[currentLed], ledState[currentLed]);
        currentLed = (currentLed + 1) % 3;
        digitalWrite(ledPins[currentLed], ledState[currentLed]);
      }
    }
  }
  lastButtonState = reading;
}

7. const int buttonPin = 2;  // Pino onde o botão está conectado
const int ledPin = 3;     // Pino do LED
int clickCount = 0;

void setup() {
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  if (digitalRead(buttonPin) == HIGH) {
    delay(50);
    while (digitalRead(buttonPin) == HIGH) {
      delay(50);
    }
    clickCount++;
    for (int i = 0; i < clickCount; i++) {
      digitalWrite(ledPin, HIGH);
      delay(1000);
      digitalWrite(ledPin, LOW);
      delay(1000);
    }
  }
}

8. const int motionSensorPin = 2;  // Pino onde o sensor de movimento está conectado
const int ledPin = 3;           // Pino do LED
const unsigned long interval = 5000;  // Intervalo de tempo para apagar o LED (em milissegundos)
unsigned long previousMillis = 0;
bool motionDetected = false;

void setup() {
  pinMode(motionSensorPin, INPUT);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  if (digitalRead(motionSensorPin) == HIGH) {
    motionDetected = true;
  }
  
  if (motionDetected) {
    digitalWrite(ledPin, HIGH);
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      digitalWrite(ledPin, LOW);
      motionDetected = false;
      previousMillis = currentMillis;
    }
  }
}

9. const int button1Pin = 2;  // Pino do botão 1
const int button2Pin = 3;  // Pino do botão 2
const int ledPin = 4;      // Pino do LED
bool button1State;
bool button2State;
bool ledState = false;

void setup() {
  pinMode(button1Pin, INPUT);
  pinMode(button2Pin, INPUT);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  button1State = digitalRead(button1Pin);
  button2State = digitalRead(button2Pin);
  
  if (button1State && !button2State) {
    ledState = true;
  } else if (!button1State && button2State) {
    ledState = false;
  } else if (button1State && button2State) {
    while (digitalRead(button1Pin) && digitalRead(button2Pin)) {
      digitalWrite(ledPin, !ledState);
      delay(500);
    }
  }
  
  digitalWrite(ledPin, ledState);
}

10. const int button1Pin = 2;  // Pino do botão 1
const int button2Pin = 3;  // Pino do botão 2
const int ledPin = 4;      // Pino do LED
bool button1State;
bool button2State;

void setup() {
  pinMode(button1Pin, INPUT);
  pinMode(button2Pin, INPUT);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  button1State = digitalRead(button1Pin);
  button2State = digitalRead(button2Pin);
  
  if (button1State || button2State) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
}



